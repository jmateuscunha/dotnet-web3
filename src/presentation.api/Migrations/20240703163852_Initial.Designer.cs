// <auto-generated />
using System;
using System.Numerics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using repository.api;

#nullable disable

namespace application.api.Migrations
{
    [DbContext(typeof(SampleDbContext))]
    [Migration("20240703163852_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("accounts_roles", b =>
                {
                    b.Property<long>("AccountsId")
                        .HasColumnType("bigint");

                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("accounts_roles");
                });

            modelBuilder.Entity("model.api.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("model.api.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<BigInteger>("Balance")
                        .HasColumnType("numeric(1000)")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Keystore")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("keystore");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("model.api.Blockchain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ChainId")
                        .HasColumnType("int4")
                        .HasColumnName("chain_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("network");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("blockchain", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b38332c-9fa4-4215-bbec-87a8588e2edf"),
                            ChainId = 11155111,
                            CreatedAt = new DateTime(2024, 7, 3, 16, 38, 52, 585, DateTimeKind.Utc).AddTicks(8457),
                            Name = "Ethereum-Sepolia",
                            Network = "Testnet",
                            UpdatedAt = new DateTime(2024, 7, 3, 13, 38, 52, 585, DateTimeKind.Local).AddTicks(8460)
                        });
                });

            modelBuilder.Entity("model.api.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2024, 7, 3, 16, 38, 52, 585, DateTimeKind.Utc).AddTicks(8331),
                            Name = "ADMIN",
                            UpdatedAt = new DateTime(2024, 7, 3, 16, 38, 52, 585, DateTimeKind.Utc).AddTicks(8333)
                        });
                });

            modelBuilder.Entity("model.api.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<BigInteger>("AmountDeducted")
                        .HasColumnType("numeric(1000)")
                        .HasColumnName("amount_deducted");

                    b.Property<BigInteger>("AmountRequested")
                        .HasColumnType("numeric(1000)")
                        .HasColumnName("amount_requested");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<BigInteger?>("BlockNumber")
                        .HasColumnType("numeric(1000)")
                        .HasColumnName("block_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<BigInteger>("FeeApplied")
                        .HasColumnType("numeric(1000)")
                        .HasColumnName("fee_applied");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_address");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<BigInteger>("Nonce")
                        .HasColumnType("numeric(1000)")
                        .HasColumnName("nonce");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to_address");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("model.api.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<Guid>("BlockchainId")
                        .HasColumnType("uuid")
                        .HasColumnName("blockchain_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlockchainId");

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("accounts_roles", b =>
                {
                    b.HasOne("model.api.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("model.api.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("model.api.Asset", b =>
                {
                    b.HasOne("model.api.Wallet", "Wallet")
                        .WithMany("Assets")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("model.api.Transaction", b =>
                {
                    b.HasOne("model.api.Asset", "Asset")
                        .WithMany("Transactions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("model.api.Wallet", b =>
                {
                    b.HasOne("model.api.Account", "Account")
                        .WithMany("Wallets")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("model.api.Blockchain", "Blockchain")
                        .WithMany("Wallets")
                        .HasForeignKey("BlockchainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Blockchain");
                });

            modelBuilder.Entity("model.api.Account", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("model.api.Asset", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("model.api.Blockchain", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("model.api.Wallet", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
